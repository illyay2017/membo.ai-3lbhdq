services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "4001:4000"  # Map host port 4001 to container port 4000
      - "9229:9229"  # Debug port
    volumes:
      - .:/app
      - /app/node_modules  # This should be an anonymous volume
    environment:
      - NODE_ENV=development
      - PORT=4000    # Internal port stays at 4000
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DATABASE_URL=postgresql://postgres:postgres@host.docker.internal:54322/postgres
      - REDIS_URL=redis://cache:6379
      - DEBUG=membo:*
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=${JWT_EXPIRY}
    depends_on:
      cache:
        condition: service_healthy
    command: npm run dev
    security_opt:
      - no-new-privileges:true
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - membo_network
    container_name: membo_api
    extra_hosts:
      - "host.docker.internal:host-gateway"

  cache:
    image: redis:7.2-alpine
    container_name: membo_cache
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - membo_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.time=15d"
      - "--storage.tsdb.retention.size=512MB"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    networks:
      - membo_network
    container_name: membo_prometheus

  grafana:
    image: grafana/grafana:10.1.2
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      prometheus:
        condition: service_started
    networks:
      - membo_network
    container_name: membo_grafana

volumes:
  redis_data:
    driver: local
  node_modules:
    name: membo_node_modules
  prometheus_data:
    name: membo_prometheus_data
  grafana_data:
    name: membo_grafana_data

networks:
  membo_network:
    name: membo_network
    driver: bridge
    enable_ipv6: true
    attachable: true
    labels:
      com.membo.environment: development
      com.membo.network: membo_network
  supabase_network:
    external: true  # This assumes Supabase created its network

configs:
  prometheus_config:
    content: |
      global:
        scrape_interval: 15s
        evaluation_interval: 15s
      scrape_configs:
        - job_name: 'membo-api'
          static_configs:
            - targets: ['api:4000']
          metrics_path: '/metrics'
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']
