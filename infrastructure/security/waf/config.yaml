# Web Application Firewall (WAF) Configuration for membo.ai
# Version: 1.0.0
# Dependencies:
# - modsecurity-crs: v3.3.4
# - google-cloud-armor: v1

# Import WAF rules
imports:
  - ./rules.yaml

# Global Settings
globals:
  WAF_MODE: ${WAF_MODE}
  LOG_LEVEL: ${LOG_LEVEL}
  PARANOIA_LEVEL: ${PARANOIA_LEVEL}

# General WAF Configuration
general:
  engine: ModSecurity
  mode: ${WAF_MODE}
  log_level: ${LOG_LEVEL}
  audit_logging: true
  audit_log_path: /var/log/waf/audit.log
  request_body_access: true
  response_body_access: true
  max_request_body_size: 10MB
  request_body_limit_action: reject
  response_headers_required: true

# Rule Engine Configuration
rule_engine:
  paranoia_level: ${PARANOIA_LEVEL}
  anomaly_scoring: true
  anomaly_threshold: 5
  sampling_percentage: 100
  enforce_bodyproc_urlencoded: true
  rule_processing_order:
    - basic
    - ratelimit
    - voice
    - study
    - custom
  session_validation:
    enabled: true
    timeout: 1800  # 30 minutes
    concurrent_limit: 3

# Google Cloud Armor Integration
cloud_armor:
  enabled: true
  policy_name: membo-waf-policy
  default_rule_action: allow
  adaptive_protection: true
  ddos_protection: true
  edge_security:
    enabled: true
    caching_enabled: true
    ssl_policy: modern
    min_tls_version: "1.3"

# Monitoring Configuration
monitoring:
  metrics_enabled: true
  prometheus_export: true
  alert_threshold:
    blocked_requests: 100
    anomaly_score: 50
    concurrent_requests: 1000
    response_time: 2000  # milliseconds
  audit_log_retention:
    enabled: true
    retention_days: 90
    archive_enabled: true

# Rule Configurations
rules:
  # Import core rules from rules.yaml
  core_rules: ${waf_rules.core_rules}
  
  # Rate limiting configuration based on user tiers
  rate_limiting: ${waf_rules.rate_limiting}
  
  # Custom endpoint-specific rules
  custom_rules: ${waf_rules.custom_rules}

# ModSecurity CRS Integration
modsecurity_crs:
  enabled: true
  version: v3.3.4
  include_path: /etc/modsecurity/crs/
  custom_rules_path: /etc/modsecurity/custom/
  default_phase: 2
  debug_log: false

# Kubernetes Integration
kubernetes:
  ingress_annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine ${WAF_MODE}
      SecAuditLog ${audit_log_path}
      SecAuditLogParts ABCFHZ

# Exports
exports:
  waf_config:
    general: ${general}
    rule_engine: ${rule_engine}
    cloud_armor: ${cloud_armor}
    monitoring: ${monitoring}