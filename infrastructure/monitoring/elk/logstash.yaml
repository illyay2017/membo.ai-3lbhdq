# Logstash Deployment for membo.ai monitoring infrastructure
# Version: 8.11.1
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: monitoring
  labels:
    app: membo
    component: logging
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: membo
      component: logging
  template:
    metadata:
      labels:
        app: membo
        component: logging
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:8.11.1
        env:
        - name: LS_JAVA_OPTS
          value: "-Xms1g -Xmx1g -XX:+UseG1GC -XX:G1ReservePercent=20 -Djava.security.egd=file:/dev/urandom"
        - name: ELASTIC_USER
          value: "elastic"
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: ELASTIC_PASSWORD
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: membo-config
              key: environment
        - name: APP_VERSION
          valueFrom:
            configMapKeyRef:
              name: membo-config
              key: version
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: beats
          containerPort: 5044
        - name: monitoring
          containerPort: 9600
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
        volumeMounts:
        - name: logstash-config
          mountPath: /usr/share/logstash/config
        - name: logstash-certs
          mountPath: /usr/share/logstash/config/certs
          readOnly: true
        - name: logstash-data
          mountPath: /usr/share/logstash/data
        - name: logstash-pipeline
          mountPath: /usr/share/logstash/pipeline
        readinessProbe:
          httpGet:
            path: /_node/stats
            port: monitoring
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /_node/stats
            port: monitoring
          initialDelaySeconds: 60
          periodSeconds: 20
      volumes:
      - name: logstash-config
        configMap:
          name: membo-config
          items:
          - key: logstash.yml
            path: logstash.yml
          - key: pipelines.yml
            path: pipelines.yml
      - name: logstash-certs
        secret:
          secretName: app-secrets
          items:
          - key: logstash.key
            path: logstash.key
          - key: logstash.crt
            path: logstash.crt
          - key: ca.crt
            path: ca.crt
      - name: logstash-data
        persistentVolumeClaim:
          claimName: logstash-data
      - name: logstash-pipeline
        configMap:
          name: membo-config
          items:
          - key: logstash-pipeline.conf
            path: logstash.conf
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: monitoring
  labels:
    app: membo
    component: logging
spec:
  type: ClusterIP
  ports:
  - name: beats
    port: 5044
    targetPort: 5044
    protocol: TCP
  - name: monitoring
    port: 9600
    targetPort: 9600
    protocol: TCP
  selector:
    app: membo
    component: logging
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: membo-config
  namespace: monitoring
data:
  logstash-pipeline.conf: |
    input {
      beats {
        port => 5044
        ssl => {
          enabled => true
          certificate => "/usr/share/logstash/config/certs/logstash.crt"
          key => "/usr/share/logstash/config/certs/logstash.key"
          certificate_authorities => ["/usr/share/logstash/config/certs/ca.crt"]
          verify_mode => "force_peer"
        }
      }
    }

    filter {
      grok {
        match => {
          "message" => [
            "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} \[%{DATA:service}\] %{DATA:trace_id} - %{GREEDYDATA:log_message}",
            "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}"
          ]
        }
      }
      
      date {
        match => ["timestamp", "ISO8601"]
        target => "@timestamp"
      }
      
      mutate {
        add_field => {
          "environment" => "${ENVIRONMENT}"
          "app_name" => "membo"
          "app_version" => "${APP_VERSION}"
          "kubernetes.namespace" => "${K8S_NAMESPACE}"
          "kubernetes.pod_name" => "${K8S_POD_NAME}"
        }
      }
    }

    output {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        user => "${ELASTIC_USER}"
        password => "${ELASTIC_PASSWORD}"
        ssl => {
          enabled => true
          certificate_authorities => ["/usr/share/logstash/config/certs/ca.crt"]
          verification_mode => "full"
        }
        index => "membo-logs-%{+YYYY.MM.dd}"
        template_name => "membo-logs"
        template_overwrite => true
        retry_on_conflict => 5
        bulk_max_size => 5000
        timeout => "30s"
      }
    }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logstash-data
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard