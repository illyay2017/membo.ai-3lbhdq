apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: membo
  labels:
    app: membo
    component: redis
    tier: cache
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
spec:
  serviceName: redis
  replicas: 3
  selector:
    matchLabels:
      app: membo
      component: redis
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        app: membo
        component: redis
    spec:
      terminationGracePeriodSeconds: 60
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: membo
                component: redis
            topologyKey: kubernetes.io/hostname
      containers:
      - name: redis
        image: redis:7.0-alpine
        command:
        - redis-server
        - /etc/redis/redis.conf
        ports:
        - containerPort: 6379
          name: redis
        - containerPort: 16379
          name: cluster
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "5Gi"
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
        - name: redis-data
          mountPath: /data
        - name: redis-tls
          mountPath: /etc/redis/tls
          readOnly: true
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: REDIS_PASSWORD
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - containerPort: 9121
          name: metrics
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: REDIS_PASSWORD
      volumes:
      - name: redis-config
        configMap:
          name: membo-config
          items:
          - key: redis.conf
            path: redis.conf
      - name: redis-tls
        secret:
          secretName: app-secrets
          items:
          - key: REDIS_TLS_CERT
            path: tls.crt
          - key: REDIS_TLS_KEY
            path: tls.key
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      storageClassName: standard
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-pdb
  namespace: membo
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: membo
      component: redis
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-network-policy
  namespace: membo
spec:
  podSelector:
    matchLabels:
      app: membo
      component: redis
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: membo
    - podSelector:
        matchLabels:
          app: membo
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 16379
    - protocol: TCP
      port: 9121